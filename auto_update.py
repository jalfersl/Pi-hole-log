#!/usr/bin/env python3
"""
Script de Atualiza√ß√£o Autom√°tica do Pi-hole Log Viewer
"""

import time
import schedule
import logging
import requests
import subprocess
import os
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('auto_update.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def update_pihole_data():
    """Atualiza os dados do Pi-hole"""
    try:
        logger.info("üîÑ Iniciando atualiza√ß√£o autom√°tica dos dados...")
        
        # Chamar o endpoint de atualiza√ß√£o da aplica√ß√£o
        response = requests.get('http://localhost:8082/api/update-data', timeout=60)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                logger.info("‚úÖ Dados atualizados com sucesso!")
            else:
                logger.error(f"‚ùå Erro na atualiza√ß√£o: {data.get('error', 'Erro desconhecido')}")
        else:
            logger.error(f"‚ùå Erro HTTP {response.status_code}: {response.text}")
            
    except requests.exceptions.ConnectionError:
        logger.error("‚ùå N√£o foi poss√≠vel conectar √† aplica√ß√£o (porta 8081)")
    except requests.exceptions.Timeout:
        logger.error("‚ùå Timeout na atualiza√ß√£o")
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado: {e}")

def check_application_status():
    """Verifica se a aplica√ß√£o est√° rodando"""
    try:
        response = requests.get('http://localhost:8082/api/stats', timeout=5)
        return response.status_code == 200
    except:
        return False

def start_application():
    """Inicia a aplica√ß√£o se n√£o estiver rodando"""
    try:
        # Verificar se a aplica√ß√£o est√° rodando
        if not check_application_status():
            logger.info("üöÄ Iniciando aplica√ß√£o...")
            
            # Mudar para o diret√≥rio da aplica√ß√£o
            os.chdir('/home/server-rede/pihole-log-viewer')
            
            # Ativar ambiente virtual
            activate_cmd = "source venv/bin/activate"
            
            # Iniciar aplica√ß√£o em background
            start_cmd = f"{activate_cmd} && nohup python3 app_local_db.py > app.log 2>&1 &"
            
            subprocess.run(start_cmd, shell=True, check=True)
            
            # Aguardar um pouco para a aplica√ß√£o inicializar
            time.sleep(10)
            
            if check_application_status():
                logger.info("‚úÖ Aplica√ß√£o iniciada com sucesso!")
            else:
                logger.error("‚ùå Falha ao iniciar aplica√ß√£o")
        else:
            logger.info("‚úÖ Aplica√ß√£o j√° est√° rodando")
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar aplica√ß√£o: {e}")

def get_update_interval():
    """L√™ o intervalo de atualiza√ß√£o da configura√ß√£o"""
    try:
        # Tentar ler da configura√ß√£o via API
        response = requests.get('http://localhost:8082/api/config', timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data.get('success') and 'settings' in data:
                interval = data['settings'].get('updateInterval', '30')
                return int(interval)
    except:
        pass
    
    # Valor padr√£o se n√£o conseguir ler
    return 30

def main():
    """Fun√ß√£o principal"""
    logger.info("üöÄ Iniciando Script de Atualiza√ß√£o Autom√°tica")
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists('app_local_db.py'):
        logger.error("‚ùå Script deve ser executado no diret√≥rio da aplica√ß√£o")
        return
    
    # Iniciar aplica√ß√£o se necess√°rio
    start_application()
    
    # Obter intervalo de atualiza√ß√£o
    interval = get_update_interval()
    logger.info(f"‚è∞ Atualiza√ß√µes a cada {interval} minutos")
    
    # Agendar atualiza√ß√µes
    schedule.every(interval).minutes.do(update_pihole_data)
    
    # Executar primeira atualiza√ß√£o imediatamente
    logger.info("üîÑ Executando primeira atualiza√ß√£o...")
    update_pihole_data()
    
    # Loop principal
    logger.info("‚è∞ Aguardando pr√≥ximas atualiza√ß√µes...")
    while True:
        try:
            schedule.run_pending()
            time.sleep(60)  # Verificar a cada minuto
            
        except KeyboardInterrupt:
            logger.info("üõë Script interrompido pelo usu√°rio")
            break
        except Exception as e:
            logger.error(f"‚ùå Erro no loop principal: {e}")
            time.sleep(60)  # Aguardar antes de tentar novamente

if __name__ == "__main__":
    main() 